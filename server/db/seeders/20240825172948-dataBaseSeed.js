'use strict';

/** @type {import('sequelize-cli').Migration} */
module.exports = {
  async up (queryInterface, Sequelize) {
    
     await queryInterface.bulkInsert('DataBases', [ {
      title: 'Август 18, 2024',
      description: 'Топ 10 вопросов на собеседование',
      article: ` Привет, друг! <br>
        Если ты находишься на этой странице, то, скорее всего, ты сейчас в поиске самой высокооплачиваемой и интересной работы) 
       Мы хотим тебе немного помочь и подготовили топ-10 самых частых вопросов на собеседованиях.<br>
       1. Что такое HTTP?<br>
HTTP расшифровывается как HyperText Transfer Protocol. Это прикладной протокол, позволяющий передавать данные. HTTP позволяет получать ресурсы, такие как HTML-страницы, изображения, видео и т.д., от серверов к браузерам. Протокол работает по модели клиент-сервер, когда клиент (например, веб-браузер) посылает запросы на сервер, а сервер в ответ предоставляет запрашиваемые ресурсы. HTTP использует различные методы для выполнения различных действий с ресурсами.<br><br>
2. Из чего состоит HTTP-запрос?<br>
Каждый HTTP-запрос состоит из трех частей, которые передаются в указанном порядке:<br>

Начальная строка: определяет тип сообщения.<br>
Заголовки: характеризуют тело сообщения, параметры передачи и другую информацию.<br>
Тело сообщения: содержит собственно данные сообщения. Оно должно быть отделено от заголовков пустой строкой.
<br>
<br>
3. Какие методы HTTP-запросов вы знаете?<br>
Метод GET запрашивает представление ресурса. Запросы, использующие этот метод, могут получать только данные.
HEAD запрашивает ресурс так же, как и метод GET, но без тела ответа.<br>
Метод POST используется для отправки сущностей на определенный ресурс. Он часто приводит к изменению состояния или другим побочным эффектам на сервере.
PUT заменяет все текущие представления ресурса данными запроса.<br>
DELETE удаляет указанный ресурс.<br>
CONNECT устанавливает туннель к серверу, идентифицированному ресурсом.<br>
OPTIONS используется для описания опций связи с ресурсом. TRACE выполняет проверку обратного хода сообщения по пути к целевому ресурсу.<br>
PATCH используется для частичной модификации ресурса.<br>
<br>
<br>

4. В чем заключается семантическое различие между PUT и PATCH?<br>
PATCH обновляет ресурс частично, например, переписывает одно поле в базе данных, а PUT полностью заменяет ресурс.
<br>
<br>
5. Что такое Websockets?<br>
Websockets - это коммуникационный протокол, обеспечивающий полнодуплексные каналы связи через одно TCP-соединение. В отличие от HTTP, который работает по модели "запрос - ответ". Websockets позволяет осуществлять двунаправленную связь между клиентом и сервером в режиме реального времени. Это означает, что клиент и сервер могут отправлять друг другу данные в любое время без необходимости нового HTTP-запроса. Сокеты Websockets широко используются в приложениях, требующих мгновенного обновления или передачи данных в реальном времени, таких как чат-приложения, средства совместного редактирования и сервисы потокового вещания.
<br>
<br>

6. Что такое REST API?<br>
REST API расшифровывается как Representational State Transfer Application Programming Interface. Это архитектурный стиль программного обеспечения, определяющий набор правил и ограничений для построения веб-сервисов. В его основе лежат принципы простоты, масштабируемости и отсутствия статичности. REST API используют стандартные методы HTTP для выполнения операций над ресурсами, идентифицируемыми URL-адресами. Эти API позволяют клиентам взаимодействовать с серверами, получать доступ к данным или изменять их, используя унифицированный интерфейс
<br>
<br>

7. Что такое WebRTC?<br>
WebRTC расшифровывается как Web Real-Time Communication. Это свободный проект с открытым исходным кодом, обеспечивающий возможности коммуникации в реальном времени в браузерах и приложениях. Он предоставляет протоколы и API для однорангового обмена аудио- и видеоданными, а также данными без необходимости установки дополнительных плагинов или программного обеспечения. WebRTC позволяет пользователям осуществлять бесшовные голосовые и видеозвонки, а также обмениваться экранами и передавать файлы непосредственно из браузера. Она стала популярной при создании таких приложений, как видеоконференции, прямые трансляции и средства совместной работы в реальном времени.
<br>
<br>

8. Что такое Git?<br>
Git - это распределенная система контроля версий, используемая для отслеживания изменений в коде. Git позволяет нескольким разработчикам одновременно работать над проектом, отслеживая все изменения, вносимые в код. Git предоставляет такие возможности, как ветвление, слияние и отмена изменений, что облегчает совместную работу и эффективное управление кодовой базой.
<br>
<br>

9. На каких принципах основано ООП?<br>
Объектно-ориентированное программирование (ООП) базируется на четырех ключевых принципах:
<br>
<br>
Инкапсуляция: Этот принцип предполагает объединение данных и методов, оперирующих этими данными, в объекты. Это позволяет скрыть данные, то есть внутреннее состояние объекта недоступно извне, и только определенные методы могут взаимодействовать с данными объекта. Инкапсуляция помогает достичь модульности, поскольку объекты можно рассматривать как "черные ящики" с четко определенными интерфейсами. Наследование: Наследование позволяет создавать новые классы (производные или дочерние), которые наследуют свойства и поведение от существующих классов (базовых или родительских). Этот принцип способствует повторному использованию кода и позволяет создавать иерархические отношения между классами. Производные классы могут добавлять или изменять функциональность, наследуя при этом общие атрибуты и методы от своих родительских классов. Полиморфизм: Полиморфизм позволяет рассматривать объекты различных классов как объекты общего базового класса. Это позволяет использовать один интерфейс для представления нескольких связанных объектов, обеспечивая гибкость и расширяемость кода. Полиморфизм часто достигается за счет переопределения методов (переопределение метода в производном классе) и перегрузки методов (наличие нескольких методов с одинаковыми именами и разными параметрами).<br>

Абстрагирование: Абстрагирование направлено на упрощенное представление основных характеристик и поведения объектов реального мира. Она предполагает создание абстрактных классов или интерфейсов, определяющих общие характеристики и методы без указания деталей их реализации. Абстракция позволяет создавать многократно используемые шаблоны кода, способствуя развитию модульного проектирования и сокращению дублирования кода. Эти принципы лежат в основе проектирования и структуры объектно-ориентированных программ, способствуя организации кода, его сопровождаемости и гибкости.
<br>
<br>
10. На каких принципах основано ООП?<br>
Модель-Вид-Контроллер (MVC): Этот паттерн разделяет приложение на три взаимосвязанных компонента - модель (данные и бизнес-логика), представление (пользовательский интерфейс) и контроллер (обрабатывает пользовательский ввод и обновляет модель и представление). Это способствует разделению проблем и модульности. Наблюдатель: Паттерн наблюдателя позволяет реализовать зависимость между объектами по принципу "один ко многим". Он определяет субъект (наблюдаемый объект) и несколько наблюдателей. Когда состояние объекта изменяется, он уведомляет об этом всех своих наблюдателей, что позволяет им соответствующим образом обновиться. Этот паттерн полезен для реализации архитектуры, управляемой событиями. Синглтон: Паттерн singleton ограничивает инстанцирование класса одним объектом. Он обеспечивает существование только одного экземпляра класса во всем приложении и предоставляет глобальную точку доступа к этому экземпляру. Синглтоны часто используются для управления общими ресурсами или поддержания глобального состояния. Фабрика: Модель фабрики предоставляет интерфейс для создания объектов, но делегирует ответственность за инстанцирование подклассам или специализированным методам фабрики. Он абстрагирует процесс создания объектов и позволяет гибко создавать объекты без жесткой привязки кода к конкретным классам.
<br>
Модуль: Шаблон модуля организует код в самостоятельные модули, инкапсулируя в них связанные переменные, функции и объекты. Это помогает достичь модульности, уменьшить загрязнение пространства имен и обеспечить четкую структуру организации кода. Модули могут быть реализованы с помощью IIFE (Immediately Invoked Function Expression) или современных модульных систем JavaScript, таких как модули ES6. Декоратор: Паттерн декоратора позволяет динамически добавлять дополнительные поведения или обязанности к объектам во время выполнения, оборачивая их в объекты-декораторы. Это гибкая альтернатива подклассификации для расширения функциональности без модификации существующего кода. Это лишь несколько примеров паттернов проектирования, широко используемых при разработке фронтенда. Выбор паттернов проектирования зависит от конкретных требований проекта и решаемой задачи.
<br>
<br>
11. Для чего нужен файл package.json? (бонусный вопрос)<br>
Файл package.json представляет собой файл метаданных. Он служит манифестом проекта, содержащим различную информацию, такую как имя проекта, версия, зависимости, скрипты и другие конфигурации. Вот некоторые ключевые цели и функциональные возможности файла package.json: Управление зависимостями: Файл package.json используется для указания зависимостей проекта, включая как зависимости от времени выполнения, так и зависимости от разработки. Эти зависимости перечисляются в полях "dependencies" и "devDependencies" соответственно. Это позволяет разработчикам легко управлять и устанавливать необходимые пакеты для своего проекта с помощью таких менеджеров пакетов, как npm или Yarn. Версионирование: Файл package.json включает номер версии проекта, что помогает отслеживать и управлять различными версиями проекта с течением времени. Это позволяет обеспечить надлежащий контроль версий и гарантировать, что разработчики смогут работать с определенными версиями проекта. Скрипты: В файле package.json можно определить пользовательские сценарии, которые могут быть выполнены с помощью менеджера пакетов. Эти сценарии могут использоваться для различных целей, таких как сборка проекта, запуск тестов, запуск сервера разработки или развертывание приложения. Они предоставляют удобный способ автоматизации общих задач разработки.

Конфигурация: Файл package.json может содержать различные параметры конфигурации проекта. Например, в нем можно указать точку входа в приложение, определить конфигурацию сборки, задать переменные окружения или указать линтеры и форматеры кода. Метаданные: Файл package.json содержит метаданные о проекте, включая название проекта, его описание, автора, лицензию, URL репозитория и другую необходимую информацию. Эти метаданные помогают обеспечить контекст и документацию по проекту. В целом файл package.json является важной частью проектов, предоставляя важную информацию и конфигурации, необходимые для правильной настройки проекта, управления зависимостями и рабочим процессом разработки.
<br>
<br>
Заключение:<br>
Подготовка к ответам на эти распространенные вопросы, изучение затронутых тем и ознакомление с соответствующими ресурсами могут повысить ваши шансы на успешное прохождение собеседования. `,
      pic:
        'https://i.postimg.cc/Hs87C8Dy/IMG-8790.jpg',
      
    },
    {
      title: 'Июль 17, 2024',
      description: 'Секреты успешных сданных экзаменов',
      article: `-Я не волнуюсь, я не волнуюсь, я не волнуюсь... <br>
      Звучит, как мантра или "твердое намерение", которое ты задаешь себе в четверг на "Нидра"-йога у Кати в кампусе Питера))<br>
      Но, как правило, волнение и стресс все равно охватывают нас в самый ответственный момент. И тут на помощь нам приходит... магия.
      Автор этого текста вовсе не сошел с ума, речь идёт о чёрных счастливых футболках. <br>
      Да, да! Тех самых, которые всем нам подарили в одни из первых дней)
      <br>
      Записывайте и запоминайте, если вы всей группой хотите перейти на следующаю фазу, то неприменно одевайтесь в них, совет действенный! Во-первых, вы на одной волне, во-вторых, "оно работает"! 
      <br>
      P.S.<br>
      Сказал бы мне кто об этом раньше, возможно, и на повторы бы не оставалась)<br>
      P.P.S.<br>
      А если так случилось, что карты не сложились, не расстраивайтесь! О том, что "повтор-не приговор!" читайте в нашей следующей статье) `,
      pic:
        'https://i.postimg.cc/MpqjSxkS/seedThis.jpg',
      
    },
    {
      title: 'Август 22, 2024',
      description: 'Повтор не приговор? Приемыши и не только',
      article: `Если бы полгода назад меня кто-нибудь назвал "Китом", мягко говоря, я бы сильно удивилась.<br>
      Попадая в Эльбрус, ты перестаешь удивляться буквально всему)<br>
      "Сойки", "Тигры", "Волки", "Рыcи"... <br>
      И только ты привыкаешь к одному, как есть вероятность, подобно оборотню, превратиться в очередную неведомую зверушку, как вы догадались, речь о "повторах".<br>
      Не важно на какой ты сейчас фазе, и по какой причине ты вдруг сменил "ореол обитания", ищи плюсы!<br>
      1) У тебя есть еще 3 недели покайфовать с классными ребятами)<br>
      2) 3 недели, чтобы закрепить знания и закрыть все пробелы.<br>
      3) Опять же новые знакомства, группа то сменилась.<br>
      4) Помочь ребятам, которые только перешли к тебе. Так ты не только подтянешь их, но и растешь сам, что может быть лучше?<br>
      5) Пробовать себя в новой роли, по секрету... наша команда в узких кругах называет себя "Сысями")) ... Только никому)
      `,
      pic:
        'https://i.postimg.cc/SRcjB1DR/IMG-8929.jpg',
      
    },
    {
      title: 'Июль 30, 2024',
      description: 'Беня - Тимлид за делом!',
      article: `Кто такой Беня? И почему его имя у всех на устах?<br>
      Бывают люди, как люди... а бывают Тим Лиды по праву рождения, Беня - один из них. <br>
      Очки для придания серьезности, 101 вопрос на каждой лекции. И попробуй ему не ответь на вопросы: "Как? Зачем? И почему?" Список на самом деле куда больше,  но это лишь малая часть.<br>
      А еще человек вписал в себя историю практически всех записей лекцией. Даже к нам на финальный проект попал, как видите:) <br>
      Хотите узнать больше про Беню? - Ищите его имя в каждом записанном коде за лето 2024.<br>
      
      `,
      pic:
        'https://i.postimg.cc/50GNPptk/IMG-8794.jpg',
      
    },], {});
    
  },

  async down (queryInterface, Sequelize) {
    
     await queryInterface.bulkDelete('DataBases', null, {});
     
  }
};
